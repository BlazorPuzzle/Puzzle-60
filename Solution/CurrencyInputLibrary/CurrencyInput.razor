<!-- 
    The markup is the same as in demo #59, 
    except we have access to the style through a CssClass property 
-->
<input onfocus="this.select()" class="@CssClass" @bind="@EditableDecimalValue" />

@code 
{
    [Parameter] 
    public decimal DecimalValue { get; set; }

    /// <summary>
    /// This callback is required in order to update a 2-way binding.
    /// We need to use the convention of the parameter name followed by "Changed"
    /// </summary>
    [Parameter]
    public EventCallback<decimal> DecimalValueChanged { get; set; }

    [Parameter]
    public string CssClass { get; set; } = string.Empty;

    string EditableDecimalValue
    {
        get => DecimalValue.ToString("C");
        set
        {
            var newValue = CleanAndFormatDecimal(value, 2);
            if (newValue != 0)
            {
                DecimalValue = newValue;
                // Raise the event to update the 2-way binding
                DecimalValueChanged.InvokeAsync(DecimalValue);
            }
                
        }
    }

    decimal CleanAndFormatDecimal(string input, int decimalPlaces)
    {
        // Try to parse the input string as a decimal
        if (decimal.TryParse(input, out decimal result))
        {
            // Format the decimal with the specified number of decimal places
            var formattedString = Math.Round(result, decimalPlaces).ToString($"F{decimalPlaces}");
            if (formattedString != "")
                return decimal.Parse(formattedString);
        }

        // If parsing fails return 0
        return 0;
    }
}